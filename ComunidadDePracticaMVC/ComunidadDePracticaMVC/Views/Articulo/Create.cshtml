@model ComunidadDePracticaMVC.Models.ArticuloModel

<script type="text/javascript" src="~/Scripts/tinymce/tinymce.min.js"></script>
<script type="text/javascript" src="~/Scripts/tinyMCEResumenConfig.js"></script>
<script type="text/javascript" src="~/Scripts/tinyMCEContenidoConfig.js"></script>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<h1>Crear articulo corto</h1>
@if (ViewBag.mensaje == "Artículo ha sido guardado")
{
    <div class="alert-success">
        @ViewBag.mensaje
    </div>
}

@if (ViewBag.mensaje == "Articulo no ha sido guardado por titulo duplicado")
{
    <div class="text-danger">
        @ViewBag.mensaje
    </div>
}

@{
    List<SelectListItem> listaNombreCorreo = new List<SelectListItem>();
    foreach (var item in ViewBag.listaAutoresCorreos)
    {
        listaNombreCorreo.Add(new SelectListItem { Value = item[1], Text = item[0] });
    }

    List<SelectListItem> listaTopicos = new List<SelectListItem>();
    foreach (var item in ViewBag.listaTopicos)
    {
        listaTopicos.Add(new SelectListItem { Text = item });
    }
}

<h2>Crear articulo corto</h2>
<hr />
<br />

@using (Html.BeginForm("Create", "Articulo", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                @Html.LabelFor(model => model.Titulo)
                @Html.TextBoxFor(model => model.Titulo, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Titulo, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(d => d.Topico)
                @Html.DropDownListFor(d => d.Topico, listaTopicos, "Escoger topico", new { @class = "form-control" })
                @Html.ValidationMessageFor(d => d.Topico, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Autor)
                @Html.ListBoxFor(m => m.Correos,new MultiSelectList(listaNombreCorreo, "Value", "Text"), new { @class = "chosen-select form-control", multiple = "multiple", width = "100%" })
                @Html.ValidationMessageFor(model => model.Correos, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(d => d.Resumen)
                @Html.TextAreaFor(d => d.Resumen, new { @class = "form-control" })
                @Html.ValidationMessageFor(d => d.Resumen, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(d => d.Contenido)
                @Html.TextAreaFor(d => d.Contenido, new { @class = "form-control" })
                @Html.ValidationMessageFor(d => d.Contenido, "", new { @class = "text-danger" })
            </div>

            <input type="submit" value="Guardar" class="btn btn-success" />
            @Html.ActionLink("Cancelar", "Index", "Home", routeValues: null, htmlAttributes: new { title = "Cancelar", @class = "btn btn-danger" })

        </div>

    </div>
    <br />
    <br />
    <br />
    <br />
}
<script type="text/javascript">
    window.onmousedown = function (e) {
        var el = e.target;
        if (el.tagName.toLowerCase() == 'option' && el.parentNode.hasAttribute('multiple')) {
            e.preventDefault();

            var display = document.getElementById('Correos');

            // toggle selection
            if (el.hasAttribute('selected')) {
                el.removeAttribute('selected');
                var str = display.innerHTML;
                str = str.replace(new RegExp(el.value + ",?"), '');
                display.innerHTML = str;
            }
            else { el.setAttribute('selected', ''); display.innerHTML += el.value + ', '; }

            // hack to correct buggy behavior
            var select = el.parentNode.cloneNode(true);
            el.parentNode.parentNode.replaceChild(select, el.parentNode);


        }
    }
</script>