@model ComunidadDePracticaMVC.Models.FiltroMiembroModel

@using System.Web.Script.Serialization;
<head>
    <script type="text/javascript" src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script type="text/javascript" src="~/Scripts/tinyMCEResumenConfig.js"></script>
    <script type="text/javascript" src="~/Scripts/tinyMCEContenidoConfig.js"></script>
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>

    @*<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css" rel="stylesheet" />*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.js"></script>

    <script src="https://davidstutz.de/bootstrap-multiselect/dist/js/bootstrap-multiselect.js"></script>
    @*<link href="https://davidstutz.de/bootstrap-multiselect/docs/css/bootstrap-3.3.2.min.css" rel="stylesheet" />*@
    <link href="https://davidstutz.de/bootstrap-multiselect/dist/css/bootstrap-multiselect.css" rel="stylesheet" />
    <script src="https://davidstutz.de/bootstrap-multiselect/docs/js/bootstrap-3.3.2.min.js"></script>

    <!-- amCharts javascript sources -->
    <script type="text/javascript" src="https://www.amcharts.com/lib/3/amcharts.js"></script>
    <script type="text/javascript" src="https://www.amcharts.com/lib/3/serial.js"></script>
    <script type="text/javascript" src="https://www.amcharts.com/lib/3/themes/light.js"></script>
</head>

@{
    JavaScriptSerializer jss = new JavaScriptSerializer();

    List<SelectListItem> listaPaises = new List<SelectListItem>();
    foreach (var item in ViewBag.listaPaises)
    {
        if (item != null || item != "")
        {
            listaPaises.Add(new SelectListItem { Text = item, Value = item });
        }
    }

    List<SelectListItem> listaHabilidades = new List<SelectListItem>();
    foreach (var item in ViewBag.listaHabilidades)
    {
        if (item != null || item != "")
        {
            listaHabilidades.Add(new SelectListItem { Text = item, Value = item });
        }
    }

    List<SelectListItem> listaIdiomas = new List<SelectListItem>();
    foreach (var item in ViewBag.listaIdiomas)
    {
        if (item != null || item != "")
        {
            listaIdiomas.Add(new SelectListItem { Text = item, Value = item });
        }
    }

    List<SelectListItem> listaHobbies = new List<SelectListItem>();
    foreach (var item in ViewBag.listaHobbies)
    {
        if (item != null || item != " ")
        {
            listaHobbies.Add(new SelectListItem { Text = item, Value = item });
        }
    }

    int length = -1;
    List<List<string>> listaEtiquetas = ViewBag.etiquetas;
    List<int> listaCounts = ViewBag.counts;
    if (ViewBag.etiquetas != null && ViewBag.graficado == 1)
    {
        if (ViewBag.etiquetas.Count > 0)
        {
            length = (ViewBag.etiquetas)[0].Count;

        }
    }




    //if (ViewBag.graficado = 1) {
    //    List
    //    foreach (var category in ViewBag.etiquetas[0]) {
    //        Li
    //    }
    //    dataProvider = jss.Serialize(listaHobbies);
    //}
}

<style>

    .form-control {
        margin: 12px 14px;
        width: 180px;
        display: inline-table;
    }

    button {
        margin-left: 697px;
        margin-top: 40px;
        height: 47px;
    }
</style>

<h1>Filtrar miembro por: </h1>

@using (Html.BeginForm("Consultar", "FiltrarMiembro", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    @Html.ListBoxFor(m => m.paisesSeleccionados, new MultiSelectList(listaPaises, "Text", "Value"), new { @class = "chosen-select form-control", multiple = "multiple", width = "100%" })
    @Html.ListBoxFor(m => m.habilidadesSeleccionados, new MultiSelectList(listaHabilidades, "Text", "Value"), new { @class = "chosen-select form-control", multiple = "multiple", width = "100%" })
    @Html.ListBoxFor(m => m.hobbiesSeleccionados, new MultiSelectList(listaHobbies, "Text", "Value"), new { @class = "chosen-select form-control", multiple = "multiple", width = "100%" })
    @Html.ListBoxFor(m => m.idiomasSeleccionados, new MultiSelectList(listaIdiomas, "Text", "Value"), new { @class = "chosen-select form-control", multiple = "multiple", width = "100%" })


    <button class="btn btn-primary" type="submit" onclick="">
        Realizar consulta
    </button>

}
<br />
<br />
<br />
<div id="graficoFiltros" style="width: 
    100%; height: 400px; background-color: #FFFFFF;"></div>

<input id="hiddenControl" type="hidden" runat="server" />

<!-- amCharts javascript code -->
@if (ViewBag.graficado == 1 && ViewBag.pivotes != null)
{
    <script type="text/javascript">
        let dataProvider = [];
        let graphs = [];
        let jsonString = @Html.Raw(ViewBag.jsonString);
        var categoriaSize = Object.keys(jsonString["0"]["categorias"]).length;
        var countsSize = Object.keys(jsonString["0"]["counts"]).length;
        var etiquetasSize = Object.keys(jsonString["0"]["etiquetas"]).length;
        var r = countsSize / categoriaSize;
        console.log(jsonString);

        var indice = 0;
        for (var i = 0; i < etiquetasSize; ++i) {
            let newGraph = {};
            newGraph["ballonText"] = "[[title]] of [[category]]:[[value]]";
            newGraph["fillAlphas"] = 1;
            newGraph["id"] = "AmGraph-" + i;
            if (i < @ViewBag.Pivotes[2]) {
                newGraph["title"] = jsonString["0"]["etiquetas"][i + @ViewBag.Pivotes[1]];
                console.log(jsonString["0"]["etiquetas"][i+ @ViewBag.Pivotes[1]], i);
            }
            else {
                newGraph["title"] = jsonString["0"]["etiquetas"][indice];
                console.log(jsonString["0"]["etiquetas"][indice], indice);
                ++indice;
            }

            newGraph["type"] = "column";
            newGraph["valueField"] = "column-" + i;
            graphs.push(newGraph);
        }

        for (var i = 0; i < categoriaSize; ++i) {
            var contador = 0;
            let newValue = {};
            newValue["category"] = jsonString["0"]["categorias"][i];
            if (@ViewBag.Pivotes[3]) {
                for (var j = 0; j < @ViewBag.Pivotes[3]; ++j) {
                    //console.log(@ViewBag.Pivotes[1]* categoriaSize);
                    var offset = (categoriaSize * j + i) + (@ViewBag.Pivotes[1]* categoriaSize) + (@ViewBag.Pivotes[2]* categoriaSize);
                    newValue["column-" + contador] = jsonString["0"]["counts"][offset];
                    console.log(offset, jsonString["0"]["counts"][offset]);
                    contador += 1;
                }
            }

            if (@ViewBag.Pivotes[2]) {
                for (var j = 0; j < @ViewBag.Pivotes[2]; ++j) {
                    //console.log(@ViewBag.Pivotes[1]* categoriaSize);
                    var offset = (categoriaSize * j + i) + (@ViewBag.Pivotes[1]* categoriaSize);
                    newValue["column-" + contador] = jsonString["0"]["counts"][offset];
                    console.log(offset, jsonString["0"]["counts"][offset]);
                    contador += 1;
                }
            }
            if (@ViewBag.Pivotes[1]) {
                for (var j = 0; j < @ViewBag.Pivotes[1]; ++j) {
                    var offset = categoriaSize * j + i;
                    newValue["column-" + contador] = jsonString["0"]["counts"][offset];
                    console.log(offset, jsonString["0"]["categorias"][i], jsonString["0"]["counts"][offset]);
                    contador += 1;
                }
            }
            dataProvider.push(newValue);
        }
        console.log(dataProvider);
       
        var chartData = [];
        var chart = AmCharts.makeChart("graficoFiltros",
            {
                "type": "serial",
                "categoryField": "category",
                "startDuration": 1,
                "categoryAxis": {
                    "gridPosition": "start"
                },
                "trendLines": [],
                "graphs": graphs,
                "guides": [],
                "valueAxes": [
                    {
                        "id": "ValueAxis-1",
                        "title": "Cantidad de miembros"
                    }
                ],
                "allLabels": [],
                "balloon": {},
                "legend": {
                    "enabled": true,
                    "useGraphSettings": true
                },
                "titles": [
                    {
                        "id": "Title-1",
                        "size": 15,
                        "text": "Chart Title"
                    }
                ],
                "dataProvider": dataProvider
            }
            
        );
    </script>
}

<script type="text/javascript">
    $(function () {
        $('#paisesSeleccionados').multiselect({
            includeSelectAllOption: true,
            inheritClass: true,
            nonSelectedText: 'Seleccione los paises',
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true
        });
    });
    $(function () {
        $('#habilidadesSeleccionados').multiselect({
            includeSelectAllOption: true,
            inheritClass: true,
            nonSelectedText: 'Seleccione las habilidades',
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true
        });
    });
    $(function () {
        $('#hobbiesSeleccionados').multiselect({
            includeSelectAllOption: true,
            inheritClass: true,
            nonSelectedText: 'Seleccione los hobbies',
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true
        });
    });
    $(function () {
        $('#idiomasSeleccionados').multiselect({
            includeSelectAllOption: true,
            inheritClass: true,
            nonSelectedText: 'Seleccione los idiomas',
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true
        });
    });
</script>